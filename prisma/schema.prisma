// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model policy_permission {
  id           String   @id @default(uuid())
  permissionId String
  policyId     String
  createdAt    DateTime
  updatedAt    DateTime
  createdBy    String?
  updatedBy    String?

  policy     policy     @relation(fields: [policyId], references: [id])
  permission permission @relation(fields: [permissionId], references: [id])
}

model passwordHistory {
  id         String   @id @default(uuid())
  userAuthId String
  password   String
  createAt   DateTime

  userAuth userAuth @relation(fields: [userAuthId], references: [id])

  @@index([userAuthId, id], name: "passwordHistory_index_0")
}

model user {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String   
  email     String   @unique
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
  image     String?
  createAt  DateTime @default(now())
  updatedAt DateTime @default(now())

  userAuths userAuth[]
}

model userAuth {
  id        String   @id @default(uuid())
  userId    String   
  username  String   @unique
  password  String
  createAt  DateTime @default(now())
  updatedAt DateTime @default(now())
  roleId    String

  user user @relation(fields: [userId], references: [id])
  role role @relation(fields: [roleId], references: [id])

  passwordHistories passwordHistory[]
}

model role {
  id        String   @id @default(uuid())
  name      String?  @unique
  isActive  Boolean
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @default(now())
  updatedBy String?

  userAuths    userAuth[]
  rolePolicies role_policy[]
}

model resources {
  id          String   @id @default(uuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  description String?
  updatedBy   String?
  createdBy   String?

  permissions permission[]
}

model permission {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  isActive    Boolean
  resourceId  String
  operationId Int?

  resources resources  @relation(fields: [resourceId], references: [id])
  operation operation? @relation(fields: [operationId], references: [id])

  policy_permissions policy_permission[]
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedBy   String?
  updatedAt   DateTime @default(now())
}

model operation {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedBy   String?
  updatedAt   DateTime @default(now())
  description String?

  permissions permission[]
}

model policy {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @default(now())
  updatedBy String?
  isActive  Boolean  @default(true)

  policy_permissions policy_permission[]
  role_policies      role_policy[]
}

model role_policy {
  id        String   @id @default(uuid())
  roleId    String
  policyId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @default(now())
  updatedBy String?

  role   role   @relation(fields: [roleId], references: [id])
  policy policy @relation(fields: [policyId], references: [id])
}
